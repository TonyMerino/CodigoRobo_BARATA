echo "# CodigoRobo_BARATA" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/TonyMerino/CodigoRobo_BARATA.git
git push -u origin main

var utils = require("../lib/utils.js");
const DIRECTIONS = ['north', 'east', 'south', 'west'];
const MOVES = ['shoot', 'move'];

var getShortestDirection = (start, endArray) => {
  var reducedArray = endArray.reduce(
    (reduced, currentPosition) => {
      if (reduced[0] === -1 || utils.getDistance(start, currentPosition) < reduced[0]) {
        reduced[0] = utils.getDistance(start, currentPosition);
        reduced[1] = currentPosition;
      }

      return reduced;
    },
    [-1, 0]
  );

  return utils.fastGetDirection(start, reducedArray[1]);
};

var turnToKill = (originalPosition, positionArray) => {
  return DIRECTIONS.reduce((result, currentDirection) => {
    if (result) return result;
    return positionArray.reduce((resultPositions, currentEnemyPosition) => {
      if (resultPositions) return resultPositions;
      return utils.isVisible(originalPosition, currentEnemyPosition, currentDirection) ? currentDirection : null;
    }, null);
  }, null);
};

const canKill = (currentPlayerState = {}, enemiesStates = []) => {
  return enemiesStates.some(enemyObject => {
    return enemyObject.isAlive &&
      isVisible(currentPlayerState.position, enemyObject.position, currentPlayerState.direction);
  });
};

var canDie = function(player, enemies) {
  return enemies
    .map(function(enemy) {
      return enemy.ammo > 0 && utils.isVisible(enemy.position, player.position, enemy.direction);
    })
    .filter(function(result) {
      return result === true;
    }).length > 0;
};

const randomMove = () => {
  return Math.random() > 0.33 ? 'move' : DIRECTIONS[Math.floor(Math.random() * DIRECTIONS.length)];
};

const isVisible = (originalPosition = [], finalPosition = [], direction = []) => {
  switch (direction) {
    case DIRECTIONS[0]:
      return originalPosition[1] === finalPosition[1] && originalPosition[0] > finalPosition[0];
    case DIRECTIONS[1]:
      return originalPosition[0] === finalPosition[0] && originalPosition[1] < finalPosition[1];
    case DIRECTIONS[2]:
      return originalPosition[1] === finalPosition[1] && originalPosition[0] < finalPosition[0];
    case DIRECTIONS[3]:
      return originalPosition[0] === finalPosition[0] && originalPosition[1] > finalPosition[1];
    default:
      break;
  }
};

var isMovementSafe = function(action, player, enemies, map) {
  var futureState = JSON.parse(JSON.stringify(player));

  if (action === 'move') {
    switch (player.direction) {
      case DIRECTIONS[0]:
        if (futureState.position[0] > 0) {
          futureState.position[0]--;
        }
        break;
      case DIRECTIONS[1]:
        if (futureState.position[1] < map.gridSize) {
          futureState.position[1]++;
        }
        break;
      case DIRECTIONS[2]:
        if (futureState.position[0] < map.gridSize) {
          futureState.position[0]++;
        }
        break;
      case DIRECTIONS[3]:
        if (futureState.position[1] > 0) {
          futureState.position[1]--;
        }
        break;
      default:
        break;
    }
  }

  if (canDie(futureState, enemies)) {
    return false;
  } else {
    return true;
  }
};

const player = {
  info: {
    name: "BARATA",
    style: 1,
  },

  ai: (playerState, enemiesStates, gameEnvironment) => {
    
    var directionToAmmo;
    var directionToPlayer;

    if (utils.canKill(playerState, enemiesStates) && playerState.ammo) return "shoot";

    if (playerState.ammo) {
      directionToPlayer = turnToKill(playerState.position, enemiesStates.map(el => el.position));
      if (directionToPlayer) {
        return directionToPlayer;
      }

      directionToPlayer = getShortestDirection(playerState.position, enemiesStates.map(el => el.position));
      if (directionToPlayer !== playerState.direction) return directionToPlayer;
      if (isMovementSafe) return "move";
    }

    if (gameEnvironment.ammoPosition.length) {
      directionToAmmo = getShortestDirection(playerState.position, gameEnvironment.ammoPosition);

      if (directionToAmmo !== playerState.direction) return directionToAmmo;
      if (isMovementSafe) return "move";
    }

    // if (Math.random() > 0.9) return "move";

    return utils.safeRandomMove();
  }
};

module.exports = player;
